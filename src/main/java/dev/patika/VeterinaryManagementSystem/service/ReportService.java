package dev.patika.VeterinaryManagementSystem.service;

import dev.patika.VeterinaryManagementSystem.dto.request.ReportRequest;
import dev.patika.VeterinaryManagementSystem.dto.response.ReportResponse;
import dev.patika.VeterinaryManagementSystem.entities.AppointmentDate;
import dev.patika.VeterinaryManagementSystem.entities.Report;
import dev.patika.VeterinaryManagementSystem.repository.AppointmentDateRepository;
import dev.patika.VeterinaryManagementSystem.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class ReportService {

    private final ReportRepository reportRepository;
    private final AppointmentDateRepository appointmentDateRepository;

    @Autowired
    public ReportService(ReportRepository reportRepository, AppointmentDateRepository appointmentDateRepository) {
        this.reportRepository = reportRepository;
        this.appointmentDateRepository = appointmentDateRepository;
    }

    public ReportResponse createReport(ReportRequest reportRequest) {
        AppointmentDate appointmentDate = appointmentDateRepository.findById(reportRequest.getAppointmentId())
                .orElseThrow(() -> new IllegalArgumentException("Invalid appointment ID"));

        Report report = new Report();
        // Note: ID is not set here, as it's automatically generated
        report.setTitle(reportRequest.getTitle());
        report.setDiagnosis(reportRequest.getDiagnosis());
        report.setPrice(reportRequest.getPrice());
        report.setAppointmentDate(appointmentDate);

        Report savedReport = reportRepository.save(report);
        return new ReportResponse(
                savedReport.getId(), // ID is generated by the database
                savedReport.getTitle(),
                savedReport.getDiagnosis(),
                savedReport.getPrice(),
                savedReport.getAppointmentDate() != null ? savedReport.getAppointmentDate().getId() : null
        );
    }



    public ReportResponse getById(Long id) {
        Report report = reportRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Report not found with id: " + id));
        return new ReportResponse(
                report.getId(),
                report.getTitle(),
                report.getDiagnosis(),
                report.getPrice(),
                report.getAppointmentDate() != null ? report.getAppointmentDate().getId() : null
        );
    }

    public List<ReportResponse> findAll() {
        return reportRepository.findAll().stream()
                .map(report -> new ReportResponse(
                        report.getId(),
                        report.getTitle(),
                        report.getDiagnosis(),
                        report.getPrice(),
                        report.getAppointmentDate() != null ? report.getAppointmentDate().getId() : null
                ))
                .collect(Collectors.toList());
    }

    public ReportResponse update(Long id, ReportRequest reportRequest) {
        Report report = reportRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Report not found with id: " + id));

        report.setTitle(reportRequest.getTitle());
        report.setDiagnosis(reportRequest.getDiagnosis());
        report.setPrice(reportRequest.getPrice());

        if(reportRequest.getAppointmentId() != null) {
            AppointmentDate appointmentDate = appointmentDateRepository.findById(reportRequest.getAppointmentId())
                    .orElseThrow(() -> new IllegalArgumentException("Invalid appointment ID"));
            report.setAppointmentDate(appointmentDate);
        }

        Report updatedReport = reportRepository.save(report);
        return new ReportResponse(
                updatedReport.getId(),
                updatedReport.getTitle(),
                updatedReport.getDiagnosis(),
                updatedReport.getPrice(),
                updatedReport.getAppointmentDate() != null ? updatedReport.getAppointmentDate().getId() : null
        );
    }

    public void deleteById(Long id) {
        reportRepository.deleteById(id);
    }
}